I have to search within a universe of scenarios.

At the beginning I wanted to keep only the best X scenarios.
That way the amount of scenarios wouldn't grow exponentially.
But the problem is when the decision duty changes.
  The X best scenarios for me are not the X best scenarios for my rival.
  
So I cannot escape from exponential growth.

So the idea is to start taking into consideration only the very best scenario.
  After I complete that I take into consideration the best 2 scenarios.
  Then, I take into consideration the best 3 scenarios.
  And so on, until I run out of time.
  
I will project only the current player's turn, and its rival's turn. So it will be only 2 turns.

First I will expand (in width, not in depth) the tree of considered options until I run out of time.
Each time a scenario hits the 2 turns mark:
  it stops going deeper
  it is added to the finalScoreCalculationQueue

Then I will calculate the final score of all the options.

Note a couple of things:
  To increase the amount of considered sub options, makes each option's final score "more intelligent"
  But it doesn't necessarily make it better
    Because, the projection of the rival moves will also be "smarter"
    
And note that this algorithm can end up comparing branches of different width.
For instance, the first branch has width 2, but the second branch has width 1, because it couldn't be completed in time
  Let's say that the second branch has better final score than the first
  It is possible that if you complete the calculation of the second branch (with width 2)
    it will become worse than the first.
So that is an inaccurate aspect of this algorithm